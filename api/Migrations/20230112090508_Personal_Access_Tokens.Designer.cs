// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api.Context;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(HrisContext))]
    [Migration("20230112090508_Personal_Access_Tokens")]
    partial class PersonalAccessTokens
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("api.Entities.EmployeeSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("EmployeeSchedules");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 1, 12, 17, 5, 7, 494, DateTimeKind.Local).AddTicks(4725),
                            Name = "Morning Shift",
                            UpdatedAt = new DateTime(2023, 1, 12, 17, 5, 7, 496, DateTimeKind.Local).AddTicks(3493)
                        });
                });

            modelBuilder.Entity("api.Entities.Personal_Access_Token", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Personal_Access_Tokens");
                });

            modelBuilder.Entity("api.Entities.Time", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("TimeHour")
                        .HasColumnType("time");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Times");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 1, 12, 17, 5, 8, 395, DateTimeKind.Local).AddTicks(9660),
                            Remarks = "First time in",
                            TimeHour = new TimeSpan(0, 9, 15, 0, 0),
                            UpdatedAt = new DateTime(2023, 1, 12, 17, 5, 8, 395, DateTimeKind.Local).AddTicks(9661)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 1, 12, 17, 5, 8, 395, DateTimeKind.Local).AddTicks(9665),
                            Remarks = "Second time in",
                            TimeHour = new TimeSpan(0, 9, 15, 0, 0),
                            UpdatedAt = new DateTime(2023, 1, 12, 17, 5, 8, 395, DateTimeKind.Local).AddTicks(9665)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 1, 12, 17, 5, 8, 395, DateTimeKind.Local).AddTicks(9666),
                            Remarks = "Third time in",
                            TimeHour = new TimeSpan(0, 10, 15, 0, 0),
                            UpdatedAt = new DateTime(2023, 1, 12, 17, 5, 8, 395, DateTimeKind.Local).AddTicks(9667)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 1, 12, 17, 5, 8, 395, DateTimeKind.Local).AddTicks(9668),
                            Remarks = "First time out",
                            TimeHour = new TimeSpan(0, 18, 15, 0, 0),
                            UpdatedAt = new DateTime(2023, 1, 12, 17, 5, 8, 395, DateTimeKind.Local).AddTicks(9669)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2023, 1, 12, 17, 5, 8, 395, DateTimeKind.Local).AddTicks(9669),
                            Remarks = "Second time out",
                            TimeHour = new TimeSpan(0, 18, 30, 0, 0),
                            UpdatedAt = new DateTime(2023, 1, 12, 17, 5, 8, 395, DateTimeKind.Local).AddTicks(9670)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2023, 1, 12, 17, 5, 8, 395, DateTimeKind.Local).AddTicks(9671),
                            Remarks = "Third time out",
                            TimeHour = new TimeSpan(0, 19, 59, 0, 0),
                            UpdatedAt = new DateTime(2023, 1, 12, 17, 5, 8, 395, DateTimeKind.Local).AddTicks(9672)
                        });
                });

            modelBuilder.Entity("api.Entities.TimeEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<int?>("TimeInId")
                        .HasColumnType("int");

                    b.Property<int?>("TimeOutId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("TrackedHours")
                        .HasColumnType("time");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("WorkedHours")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("TimeInId");

                    b.HasIndex("TimeOutId");

                    b.HasIndex("UserId");

                    b.ToTable("TimeEntries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 1, 12, 17, 5, 8, 395, DateTimeKind.Local).AddTicks(9692),
                            Date = new DateTime(2023, 1, 12, 17, 5, 8, 395, DateTimeKind.Local).AddTicks(9694),
                            EndTime = new TimeSpan(0, 18, 30, 0, 0),
                            StartTime = new TimeSpan(0, 9, 30, 0, 0),
                            TimeInId = 1,
                            TimeOutId = 4,
                            TrackedHours = new TimeSpan(0, 8, 0, 0, 0),
                            UpdatedAt = new DateTime(2023, 1, 12, 17, 5, 8, 395, DateTimeKind.Local).AddTicks(9693),
                            UserId = 1,
                            WorkedHours = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 1, 12, 17, 5, 8, 395, DateTimeKind.Local).AddTicks(9736),
                            Date = new DateTime(2023, 1, 12, 17, 5, 8, 395, DateTimeKind.Local).AddTicks(9737),
                            EndTime = new TimeSpan(0, 18, 30, 0, 0),
                            StartTime = new TimeSpan(0, 9, 30, 0, 0),
                            TimeInId = 2,
                            TimeOutId = 5,
                            TrackedHours = new TimeSpan(0, 8, 0, 0, 0),
                            UpdatedAt = new DateTime(2023, 1, 12, 17, 5, 8, 395, DateTimeKind.Local).AddTicks(9736),
                            UserId = 2,
                            WorkedHours = new TimeSpan(0, 8, 15, 0, 0)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 1, 12, 17, 5, 8, 395, DateTimeKind.Local).AddTicks(9763),
                            Date = new DateTime(2023, 1, 12, 17, 5, 8, 395, DateTimeKind.Local).AddTicks(9764),
                            EndTime = new TimeSpan(0, 18, 30, 0, 0),
                            StartTime = new TimeSpan(0, 9, 30, 0, 0),
                            TimeInId = 3,
                            TimeOutId = 6,
                            TrackedHours = new TimeSpan(0, 8, 0, 0, 0),
                            UpdatedAt = new DateTime(2023, 1, 12, 17, 5, 8, 395, DateTimeKind.Local).AddTicks(9764),
                            UserId = 1,
                            WorkedHours = new TimeSpan(0, 8, 44, 0, 0)
                        });
                });

            modelBuilder.Entity("api.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeScheduleId")
                        .HasColumnType("int");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeScheduleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 1, 12, 17, 5, 8, 395, DateTimeKind.Local).AddTicks(9616),
                            Email = "johndoe@sun-asterisk.com",
                            EmployeeScheduleId = 1,
                            IsOnline = false,
                            Name = "John Doe",
                            RoleId = 0,
                            UpdatedAt = new DateTime(2023, 1, 12, 17, 5, 8, 395, DateTimeKind.Local).AddTicks(9632)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 1, 12, 17, 5, 8, 395, DateTimeKind.Local).AddTicks(9638),
                            Email = "reanschwarzer@sun-asterisk.com",
                            EmployeeScheduleId = 1,
                            IsOnline = false,
                            Name = "Rean Schwarzer",
                            RoleId = 0,
                            UpdatedAt = new DateTime(2023, 1, 12, 17, 5, 8, 395, DateTimeKind.Local).AddTicks(9639)
                        });
                });

            modelBuilder.Entity("api.Entities.WorkingDayTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeScheduleId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("From")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("To")
                        .HasColumnType("time");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeScheduleId")
                        .IsUnique();

                    b.ToTable("WorkingDayTimes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 1, 12, 17, 5, 7, 496, DateTimeKind.Local).AddTicks(5990),
                            EmployeeScheduleId = 1,
                            From = new TimeSpan(0, 9, 0, 0, 0),
                            To = new TimeSpan(0, 6, 0, 0, 0),
                            UpdatedAt = new DateTime(2023, 1, 12, 17, 5, 7, 496, DateTimeKind.Local).AddTicks(5993)
                        });
                });

            modelBuilder.Entity("api.Entities.Personal_Access_Token", b =>
                {
                    b.HasOne("api.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Entities.TimeEntry", b =>
                {
                    b.HasOne("api.Entities.Time", "TimeIn")
                        .WithMany()
                        .HasForeignKey("TimeInId");

                    b.HasOne("api.Entities.Time", "TimeOut")
                        .WithMany()
                        .HasForeignKey("TimeOutId");

                    b.HasOne("api.Entities.User", "User")
                        .WithMany("TimeEntries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TimeIn");

                    b.Navigation("TimeOut");

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Entities.User", b =>
                {
                    b.HasOne("api.Entities.EmployeeSchedule", "EmployeeSchedule")
                        .WithMany("Users")
                        .HasForeignKey("EmployeeScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeSchedule");
                });

            modelBuilder.Entity("api.Entities.WorkingDayTime", b =>
                {
                    b.HasOne("api.Entities.EmployeeSchedule", null)
                        .WithOne("WorkingDayTime")
                        .HasForeignKey("api.Entities.WorkingDayTime", "EmployeeScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.EmployeeSchedule", b =>
                {
                    b.Navigation("Users");

                    b.Navigation("WorkingDayTime")
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.User", b =>
                {
                    b.Navigation("TimeEntries");
                });
#pragma warning restore 612, 618
        }
    }
}
